package com.devonfw.module.kafka.config;

import java.util.Properties;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.EnvironmentAware;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;
import org.springframework.core.env.Environment;

/**
 * class reads producer properties from application.properties as part of POC In actual project Implementation move
 * these to separate location Basic minimum set of properties are considered for POC Current configuration supports
 * plaintext protocol and not SSL
 *
 * @author pravbhav
 *
 */
@PropertySource("classpath:global.properties")
@ConfigurationProperties(prefix = "kafka.producer")
public class KafkaProducerProperties {

  /*static Environment environment;

  @Override
  public void setEnvironment(Environment environment) {

    KafkaProducerProperties.environment = environment;
  }
*/
	/*
  @Bean
  public static PropertySourcesPlaceholderConfigurer propertyConfigInDev() {

    return new PropertySourcesPlaceholderConfigurer();
  }*/

  /**
   * @return environment
   */

  /*public static Environment getEnvironment() {

    return environment;
  }*/

  /**
   * @return clientId
   */
  public String getClientId() {

	  return this.clientId;
//    return environment.getProperty("kafka.producer.client.id");
  }

  /**
   * @return bootstrapservers
   */
  public String getBootstrapservers() {

    // kafka.producer.bootstrap.servers
	  return this.bootstrapservers;
 //   return environment.getProperty("kafka.producer.bootstrap.servers");

  }

  /**
   * @return acks
   */
  public String getAcks() {

	  return this.acks;
   // return environment.getProperty("kafka.producer.acks").trim();
  }

  /**
   * @return retries
   */
  public String getRetries() {

	  return this.retries ;
  //  return environment.getProperty("kafka.producer.retries");

  }

  /**
   * @return batchsize
   */
  public String getBatchsize() {

	return this.batchsize ;
   // return environment.getProperty("kafka.producer.batch.size");

  }

  /**
   * @return lingerms
   */
  public String getLingerms() {

	  return this.lingerms ;
   // return environment.getProperty("kafka.producer.linger.ms");

  }

  /**
   * @return buffermemory
   */
  public String getBuffermemory() {

	  return this.buffermemory ;

  }

  /**
   * @return keyserializer
   */
  public String getKeyserializer() {

	  return this.keyserializer ;
  }

  /**
   * @return valueserializer
   */
  public String getValueserializer() {

	  return this.valueserializer ;
  }

  /*
   * Return properties object for producer to be created.
   *
   */
  public Properties getProperties() {

    Properties prop = new Properties();

    prop.load(getClass().getResourceAsStream("global.properties"));



    prop.setProperty("client.id", getClientId());
    System.out.println( "cid" + getClientId() );
    prop.setProperty("bootstrap.servers", getBootstrapservers());

    System.out.println( "bs" + getBootstrapservers() );

    prop.setProperty("acks", getAcks());
    prop.setProperty("retries", getRetries());
    prop.setProperty("batch.size", getBatchsize());
    prop.setProperty("linger.ms", getLingerms());
    prop.setProperty("buffer.memory", getBuffermemory());
    prop.setProperty("key.serializer", getKeyserializer());
    prop.setProperty("value.serializer", getValueserializer());

    /*
    prop.setProperty("client.id", "console-producer");
    prop.setProperty("bootstrap.servers", "10.76.3.49:9092");
    prop.setProperty("acks", "all");
    prop.setProperty("retries", "0");
    prop.setProperty("batch.size", "16384");
    prop.setProperty("linger.ms", "1");
    prop.setProperty("buffer.memory", "33554432");
    prop.setProperty("key.serializer", "com.devonfw.module.kafka.config.KafkaMessageSerializer");
    prop.setProperty("value.serializer", "com.devonfw.module.kafka.config.KafkaMessageSerializer");
*/
    return prop;

  }

  /**
   * @return topic
   */
  public String getTopic() {
	return this.topic ;

  }

  @Value("${kafka.producer.clientId}")
  private String clientId;

  @Value("${kafka.producer.bootstrapservers}")
  private String bootstrapservers;

  @Value("${kafka.producer.acks}")
  private String acks;

  @Value("${kafka.producer.retries}")
  private String retries;

  @Value("${kafka.producer.batchsize}")
  private String batchsize;

  @Value("${kafka.producer.lingerms}")
  private String lingerms;

  @Value("${kafka.producer.buffermemory}")
  private String buffermemory;

  @Value("${kafka.producer.keyserializer}")
  private String keyserializer;

  @Value("${kafka.producer.valueserializer}")
  private String valueserializer;

  @Value("${kafka.producer.topic}")
  private String topic;

}
